
package Fos.Client.User;

import Fos.FosInterface;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JOptionPane;
import java.rmi.Naming;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

public class ViewOrder extends javax.swing.JFrame {

    /**
     * Creates new form ViewOrder
     */
    public ViewOrder() {
        initComponents();
        userViewOrderId();
        
        jComboBox1.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    showOrderSummary();
                }
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        order_panel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Order History");

        order_panel.setMinimumSize(new java.awt.Dimension(0, 0));
        order_panel.setPreferredSize(new java.awt.Dimension(800, 1200));

        javax.swing.GroupLayout order_panelLayout = new javax.swing.GroupLayout(order_panel);
        order_panel.setLayout(order_panelLayout);
        order_panelLayout.setHorizontalGroup(
            order_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        order_panelLayout.setVerticalGroup(
            order_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(order_panel);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGap(139, 139, 139)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setVisible(false);
        new Menu().setVisible(true);        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewOrder().setVisible(true);
            }
        });
    }
    
    public void userViewOrderId () {
        try {
            FosInterface dbi = (FosInterface)Naming.lookup("rmi://localhost:2001/userViewOrderId");
            ArrayList<String[]>  result = dbi.userViewOrderId();
            
            jComboBox1.removeAllItems(); // Clear existing items
            for (String[] row : result) {
                jComboBox1.addItem(row[0]);
            }

            if (jComboBox1.getItemCount() > 0) {
                jComboBox1.setSelectedIndex(jComboBox1.getItemCount() - 1); // Select the last item
                showOrderSummary(); // Show the summary for the selected (most recent) order ID
            }
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }

    public void showOrderSummary() {
        // Clear existing components from the panel
        order_panel.removeAll();
        order_panel.revalidate();
        order_panel.repaint();
      
        String ID = jComboBox1.getSelectedItem().toString();

        int xPosition = 50; // Initial horizontal position
        int yPosition = 50; // Vertical position for labels
        int maxItemsPerRow = 1; // Maximum items per row
        int itemCounter = 0; // Counter to track items in the current row

        Font nameFont = new Font("SansSerif", Font.BOLD, 30); // Adjust the font size here
        Font priceFont = new Font("SansSerif", Font.PLAIN, 26);
        Font quantityFont = new Font("SansSerif", Font.PLAIN, 26);
        Font totalFont = new Font("SansSerif", Font.BOLD, 36);

        try {
            FosInterface dbi = (FosInterface)Naming.lookup("rmi://localhost:2001/showOrderSummary");
            ArrayList<String[]>  result = dbi.showOrderSummary(ID);
            for (String[] orderData : result) {
         
                // Create a JLabel for the image
                ImageIcon imageIcon = new ImageIcon(new ImageIcon(orderData[0]).getImage().getScaledInstance(250, 250, Image.SCALE_SMOOTH));
                JLabel imageLabel = new JLabel(imageIcon);
                imageLabel.setBounds(xPosition, yPosition, 250, 250);

                // Create a JLabel for the name
                JLabel nameLabel = new JLabel("Name: " + orderData[1]);
                nameLabel.setBounds(xPosition + 300, yPosition + 100, 250, 30);
                nameLabel.setFont(nameFont); // Set the font for the name label

                // Create a JLabel for the price
                JLabel priceLabel = new JLabel("Price: RM " + orderData[2]);
                priceLabel.setBounds(xPosition + 300, yPosition + 150, 250, 30);
                priceLabel.setFont(priceFont); // Set the font for the price label

                // Create a JLabel for the quantity
                JLabel quantityLabel = new JLabel("x " + orderData[3]);
                quantityLabel.setBounds(xPosition + 550, yPosition + 125, 250, 30);
                quantityLabel.setFont(quantityFont); // Set the font for the quantity label

                // Add labels to the order_panel
                order_panel.add(imageLabel);
                order_panel.add(nameLabel);
                order_panel.add(priceLabel);
                order_panel.add(quantityLabel);

                // Increment the item counter
                itemCounter++;

                // If the maximum items per row is reached, move to the next row
                if (itemCounter >= maxItemsPerRow) {
                    itemCounter = 0; // Reset item counter
                    xPosition = 50; // Reset horizontal position
                    yPosition += 300; // Adjust the vertical gap between rows as needed
                } else {
                    // Adjust horizontal position for the next menu item in the same row
                    xPosition += 650; // Increase as needed to create a gap between menu items in the same row
                }
            }
            // Get the total amount from the last element of the result list
            String totalAmount = result.get(result.size() - 1)[4];
            
            System.out.println("Total Amount: " + totalAmount);

            // Display total amount including tax at the bottom of the order summary
            JLabel totalAmountLabel = new JLabel("Order Total: RM " + totalAmount);
            totalAmountLabel.setBounds(xPosition, yPosition, 600, 30); // Adjust width as needed
            totalAmountLabel.setFont(totalFont); // Set the font for the total amount label
            order_panel.add(totalAmountLabel);
            
            System.out.println("Total Amount Label Added");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel order_panel;
    // End of variables declaration//GEN-END:variables
}
